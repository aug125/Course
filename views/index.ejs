<html>
	<head>
		 <script src="https://cdn.jsdelivr.net/npm/phaser@3.22.0/dist/phaser-arcade-physics.min.js"></script> 
		 <script src="/socket.io/socket.io.js"></script>
	</head>
	<body>

	<body>
		<!-- Barre de navigation en haut 	
		<div class="container-fluid">
			<nav class="navbar navbar-inverse navbar-fixed-top">
			  <div class="container">
				<div class="navbar-header">
				  <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				  </button>
				  <a class="navbar-brand" href="#">Aquabattle</a>
				</div>
				<div id="navbar" class="collapse navbar-collapse">
				  <ul class="nav navbar-nav">
					<li class="active"><a href="#">Home</a></li>
					<li><a href="#about">About</a></li>
					<li><a href="#contact">Contact</a></li>
				  </ul>
				</div><!--/.nav-collapse --
			  </div>
			</nav>	
		</div>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-9">	 
					<canvas id="canvas" width=160 height=100> </canvas>
				</div>
				<div class="col-md-3 hidden-xs">
					<div class="chat" id="chat">Test</div>
				</div>
			</div>
		</div>	 	 
-->		
		<script>
			
			var config = {
				type: Phaser.AUTO,
				width: 1000,
				height:1000,
				physics: {
        			default: 'arcade'
		    	},
				scene: {
					preload: preload,
					create: create,
					update: update
				}
				
			};

			var game = new Phaser.Game(config);
			

			function preload ()
			{
				this.load.image('vaisseau', 'vaisseau.png');
				this.load.image('star', 'star.png');
			}

			function create ()
			{
				camera = this.cameras.main;
				camera.setSize(1000, 1000);

				
				//  This will run in Canvas mode, so let's gain a little speed and display
				game.renderer.clearBeforeRender = false;
    			game.renderer.roundPixels = true;

				// Ajout des étoiles en arrière plan
				bg = this.add.group({ key: 'star', frameQuantity: 50 });



				var rect = new Phaser.Geom.Rectangle(camera.width, camera.height, camera.width, camera.height);
    			Phaser.Actions.RandomRectangle(bg.getChildren(), rect);			


				// Définir couleur arrière plan
				camera.setBackgroundColor('rgba(0, 0, 0, 0.5)');				

				player = this.physics.add.image(0, 0, 'vaisseau');

				// Caméra suit le joueur
				camera.startFollow(player, false, 0.5, 0.5);

			}

			function update ()
			{
				// Gestion des inputs du joueur
				cursors = this.input.keyboard.createCursorKeys();
				if (cursors.left.isDown)
				{
					player.setAngularVelocity(-200);

				}
				else if (cursors.right.isDown)
				{
					player.setAngularVelocity(200);
				}
				else
				{
					player.setAngularVelocity(0);
				}
				if (cursors.up.isDown)
				{
					velocity = this.physics.velocityFromRotation(player.rotation, 200);
					player.setAccelerationX(velocity.x);
					player.setAccelerationY(velocity.y);
					//player.setAcceleration(velocity);
				}
				else
				{
					player.setAccelerationX (0);
					player.setAccelerationY (0);
				}

				// Mettre toutes les étoiles dans l'image
				stars = bg.getChildren();
  				for (i = 0; i < stars.length; i++) 
			    {
					if (stars[i].x < camera.worldView.x)
						stars[i].x += camera.width;
					if (stars[i].x > camera.worldView.x  + camera.width)
						stars[i].x -= camera.width;

					if (stars[i].y < camera.worldView.y)
						stars[i].y += camera.width;
					if (stars[i].y > camera.worldView.y + camera.height)
						stars[i].y -= camera.width;
					console.log(camera.worldView.x);
				}

			}	
						
			document.oncontextmenu = new Function("return false");
			
			// Connexion socket.io
//            var socket = io.connect('http://192.168.10.3:8080');
			var socket = io.connect('http://127.0.0.1:8080');
			var canvas = document.getElementById('canvas');
			var textArea = document.getElementById('chat');
			var divGame = document.getElementById('div_game');			
			
			var listVaisseaux = [];					
			var tirs = [];
			var idJoueur;
			var time;
			var sourisX = 0;
			var sourisY = 0;
			var select = -1;
			var vaisseau = new Image();			
			var leftUp = true;
			var rightUp = true;
			var timeDetectionEnnemi = new Date().getTime();
						
			document.oncontextmenu = new Function("return false");			
			
			var vaisseauJoueur = new Image();
		
			socket.emit('newPlayer');
						
			//fonctions
									
			function Tir(x,y,t,p) 
			{

			}

			function distance(x1,y1,x2,y2)
			{
				return Math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
			}


				
			// Sockets						
			socket.on('infosPartie', function(num) {
				console.log('infos');
				idJoueur = num;				
			});			
			
			socket.on('message', function(msg) {
				 $('#chat').append("<p>" + msg + "</p>");			
			});
			
			socket.on('vaisseau', function(id,px,py,pspeed,prange,ppuissance) {
				console.log('vaisseau');
//				listVaisseau.push(new Bateau(id,px,py,idJoueur,pspeed,prange,ppuissance));
			});
						
			socket.on('jeu', function () {
				console.log('jeu');
			});
			
			socket.on('tir', function (x,y,p) {	
				console.log('tir');
				tirs.push(new Tir(x,y,0,p));			
			});
			
        </script>
    </body>
</html>